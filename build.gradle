plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.9'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'demo'
version = '0.0.1-SNAPSHOT'
description = 'AMHSDataGen'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// 빌드 최적화 설정
tasks.named('bootJar') {
    archiveFileName = "${project.name}-${project.version}.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // JAR 파일 최적화
    exclude '**/application-development.properties'
    exclude '**/logback-*.xml'
}

// 개발 환경 설정
tasks.named('bootRun') {
    jvmArgs = [
        '-Dspring.profiles.active=development',
        '-Dspring.devtools.restart.enabled=true',
        '-Dspring.devtools.livereload.enabled=true'
    ]
}

// 프로덕션 빌드 태스크
task productionBuild(type: org.springframework.boot.gradle.tasks.bundling.BootJar) {
    archiveFileName = "${project.name}-production.jar"
    mainClass = 'demo.amhsdatagen.DataGenApplication'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Java 버전 설정
    targetJavaVersion = JavaVersion.VERSION_21
    
    // 프로덕션 최적화
    exclude 'application-development.properties'
    exclude '**/devtools/**'
    exclude '**/test/**'
    exclude '**/*.map'
    exclude '**/src/**'
    exclude '**/node_modules/**'
    
    // 클래스패스 설정
    classpath = sourceSets.main.runtimeClasspath
}

// 정적 리소스 압축 태스크
task compressResources {
    doLast {
        println "정적 리소스 압축 완료"
    }
}

productionBuild.dependsOn compressResources
